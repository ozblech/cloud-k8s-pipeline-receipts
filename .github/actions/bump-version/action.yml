name: Bump Version
description: "Bumps the version based on the latest Git tag and short SHA"

outputs:
  new_image_tag:
    description: "Generated image tag (e.g., 1.0.15-a1b2c3d)"
    value: ${{ steps.extract.outputs.new_image_tag }}
  new_version:
    description: "Next version in X.Y.Z format (e.g., 1.0.15)"
    value: ${{ steps.extract.outputs.new_version }}

runs:
  using: "composite"
  steps:
    - name: Extract Git tag and SHA
      id: extract
      shell: bash
      run: |
        # Fetch all tags from remote
        git fetch --tags

        # Resolve commit SHAs
        CURRENT_SHA=$(git rev-parse HEAD)
        SHORT_SHA=$(git rev-parse --short HEAD)

        # Get the latest tag starting with 'v' (e.g., v1.0.0)
        LATEST_TAG=$(git tag --sort=-creatordate | grep '^v' | head -n 1)
        LATEST_TAG=${LATEST_TAG:-v1.0.0}

        # Strip 'v' prefix to get semver (e.g., 1.0.0)
        VERSION="${LATEST_TAG#v}"

        # Output the current image tag (even if already tagged)
        echo "current_image_tag=${VERSION}-${SHORT_SHA}" >> "$GITHUB_OUTPUT"

        # Check if this commit is already tagged
        EXISTING_TAG=$(git tag --points-at "$CURRENT_SHA" | grep '^v' | head -n 1)

        if [ -n "$EXISTING_TAG" ]; then
          echo "⚠️ Commit already has tag: $EXISTING_TAG. Skipping bump."
          echo "new_image_tag=${VERSION}-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "new_version=${LATEST_TAG}" >> "$GITHUB_OUTPUT"
        else
          # Parse major.minor.patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          
          echo "✅ Bumping version to: v${NEW_VERSION}-${SHORT_SHA}"
          echo "new_image_tag=${NEW_VERSION}-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "new_version=v${NEW_VERSION}" >> "$GITHUB_OUTPUT"
        fi