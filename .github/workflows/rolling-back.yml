name: CD - Rollback Deployment

permissions:
  id-token: write # Required for OIDC
  contents: read

on:
  workflow_dispatch:
    inputs:
      revision:
        description: 'Revision number to roll back to (leave empty for previous)'
        required: false
        default: ''

jobs:
  rollback:
    runs-on: ubuntu-latest
    env:
      IMAGE_REPO: ${{ vars.IMAGE_REPO }}              # e.g., ozblech/receipts-api
      DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }}   # e.g., receipts-api
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Setup SSH key
      #   run: |
      #     echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
      #     chmod 600 ec2_key.pem

      - name: Fetch EC2 public IP
        id: fetch-minikube-ec2-ip
        uses: ./.github/actions/fetch-ec2-public-ip
        with:
          tag_name: ${{ vars.MINIKUBE_EC2_TAG_NAME }}       # e.g., minikube-ec2
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          aws_region: ${{ env.AWS_REGION }}

      - name: Get latest Git tag
        if: ${{ github.event.inputs.revision == '' }}
        id: get-latest-tag
        uses: ./.github/actions/extract-image-tag

      - name: Echo previous image tag
        if: ${{ github.event.inputs.revision == '' }}
        run: |
            echo "Previous image tag: ${{ steps.get-latest-tag.outputs.previous_image_tag }}"   

      
      - name: Build rollback command dynamically into JSON file
        id: generate-commands-file
        env:
          REVISION_INPUT: ${{ github.event.inputs.revision }}
          PREVIOUS_IMAGE_TAG: ${{ steps.get-latest-tag.outputs.previous_image_tag }}
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
          IMAGE_REPO: ${{ env.IMAGE_REPO }}
          KUBECONFIG_PATH: ${{ vars.KUBECONFIG_PATH }}
        run: |
          jq -n --arg r "$REVISION_INPUT" \
                --arg p "$PREVIOUS_IMAGE_TAG" \
                --arg d "$DEPLOYMENT_NAME" \
                --arg i "$IMAGE_REPO" \
                --arg kubeconfig_path "$KUBECONFIG_PATH" \
          '{
            commands: [
              "#!/bin/bash",
              "export KUBECONFIG=\($kubeconfig_path)",
              (if $r == "" then
                "echo \"Rolling back to previous image tag: \($p)\"",
                "kubectl set image deployment/\($d) \($d)=\($i):\($p) -n default"
              else
                "echo \"Rolling back to revision: \($r)\"",
                "kubectl rollout undo deployment/\($d) --to-revision=\($r) -n default"
              end),
              "kubectl rollout status deployment/\($d) -n default"
            ]
          }' > commands.json


      - name: Run SSM command using action
        id: run-ssm-command
        uses: ./.github/actions/ssm
        with:
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          instance_id: ${{ steps.fetch-minikube-ec2-ip.outputs.instance_id }}
          commands-file-name: commands.json
          aws_region: ${{ env.AWS_REGION }}

      - name: Generate command file to verify image
        run: |
          jq -n --arg d "$DEPLOYMENT_NAME" \
                --arg kubeconfig_path "${{ vars.KUBECONFIG_PATH }}" \
            '{
            "commands": [
              "#!/bin/bash",
              "export KUBECONFIG=\($kubeconfig_path)",
              "kubectl get deployment/\($d) -o jsonpath={.spec.template.spec.containers[0].image} -n default"
            ]
          }' > verify-image-command.json

      - name: Verify rollback result via SSM
        id: verify-rollback
        uses: ./.github/actions/ssm
        with:
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          instance_id: ${{ steps.fetch-minikube-ec2-ip.outputs.instance_id }}
          aws_region: ${{ env.AWS_REGION }}
          commands-file-name: verify-image-command.json

      - name: Parse and compare rollback result
        if: ${{ github.event.inputs.revision == '' }}
        run: |
          DEPLOYED_IMAGE="${{ steps.verify-rollback.outputs.command_output }}"
          EXPECTED_IMAGE="${{ env.IMAGE_REPO }}:${{ steps.get-latest-tag.outputs.previous_image_tag }}"

          echo "✅ Retrieved deployed image: $DEPLOYED_IMAGE"
          echo "🔄 Expecting image: $EXPECTED_IMAGE"

          if [[ "$DEPLOYED_IMAGE" != "$EXPECTED_IMAGE" ]]; then
            echo "❌ Rollback verification failed: Deployed image does not match expected."
            exit 1
          else
            echo "✅ Rollback verified successfully: Image tag matches expected."
          fi

      - name: Summarize Rollback
        run: |
          echo "## Rollback Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment: $DEPLOYMENT_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- Rolled back to: $([[ -z "$REVISION_INPUT" ]] && echo "$PREVIOUS_IMAGE_TAG" || echo "Revision $REVISION_INPUT")" >> $GITHUB_STEP_SUMMARY


      # - name: Rollback via SSH
      #   env:
      #       REVISION_INPUT: ${{ github.event.inputs.revision }}
      #       PREVIOUS_IMAGE_TAG: ${{ steps.get-latest-tag.outputs.previous_image_tag }}
      #       EC2_PUBLIC_DNS: ${{ steps.fetch-minikube-ec2-ip.outputs.public_dns }}
      #   run: |
      #       ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@$EC2_PUBLIC_DNS << EOF
      #       export KUBECONFIG=\$HOME/.kube/config

      #       if [ -z "$REVISION_INPUT" ]; then
      #           echo "Rolling back to previous image tag: $PREVIOUS_IMAGE_TAG"
      #           kubectl set image deployment/$DEPLOYMENT_NAME receipts-api=$IMAGE_REPO:$PREVIOUS_IMAGE_TAG -n default
      #       else
      #           echo "Rolling back to revision: $REVISION_INPUT"
      #           kubectl rollout undo deployment/$DEPLOYMENT_NAME --to-revision=$REVISION_INPUT -n default
      #       fi

      #       kubectl rollout status deployment/$DEPLOYMENT_NAME -n default
      #       EOF

      # - name: Rollback via SSM to EC2
      #   env:
      #     INSTANCE_ID: ${{ steps.fetch-minikube-ec2-ip.outputs.instance_id }}
      #     REVISION_INPUT: ${{ github.event.inputs.revision }}
      #     PREVIOUS_IMAGE_TAG: ${{ steps.get-latest-tag.outputs.previous_image_tag }}
      #     EC2_PUBLIC_DNS: ${{ steps.fetch-minikube-ec2-ip.outputs.public_dns }}
      #   run: |
      #     aws ssm send-command \
      #       --instance-ids "$INSTANCE_ID" \
      #       --document-name "AWS-RunShellScript" \
      #       --comment "Rollback deployment" \
      #       --parameters 'commands=["#!/bin/bash",
      #         "export KUBECONFIG=/home/ec2-user/.kube/config",
      #         "if [ -z \"${REVISION_INPUT}\" ]; then",
      #         "  echo Rolling back to previous image tag: ${PREVIOUS_IMAGE_TAG}",
      #         "  kubectl set image deployment/${DEPLOYMENT_NAME} receipts-api=${IMAGE_REPO}:${PREVIOUS_IMAGE_TAG} -n default",
      #         "else",
      #         "  echo Rolling back to revision: ${REVISION_INPUT}",
      #         "  kubectl rollout undo deployment/${DEPLOYMENT_NAME} --to-revision=${REVISION_INPUT} -n default",
      #         "fi",
      #         "kubectl rollout status deployment/${DEPLOYMENT_NAME} -n default"
      #       ]' \
      #       --cloud-watch-output-config CloudWatchOutputEnabled=true \
      #       --region ${{ secrets.AWS_REGION }} \
      #       --output text

