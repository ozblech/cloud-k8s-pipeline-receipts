name: CD - Deploy with kubectl

permissions:
  id-token: write  # Required for OIDC
  contents: read   # Required for actions/checkout

on:
  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string

env:
  IMAGE_REPO: ${{ vars.IMAGE_REPO }}              # e.g., ozblech/receipts-api
  DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }}    # e.g., receipts-api
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IMAGE_TAG: ${{ inputs.image_tag }}  # e.g., a1b2c3d

jobs:
  deploy:
    name: Deploy to EC2 Minikube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code # for using actions
        uses: actions/checkout@v4

      - name: Fetch EC2 public IP
        id: fetch-minikube-ec2-ip
        uses: ./.github/actions/fetch-ec2-public-ip
        with:
          tag_name: ${{ vars.MINIKUBE_EC2_TAG_NAME }}       # e.g., minikube-ec2
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          aws_region: ${{ env.AWS_REGION }}

      - name: Print DNS
        run: echo "DNS is ${{ steps.fetch-minikube-ec2-ip.outputs.public_dns }}"

      - name: Generate values-secret.yaml from template
        run: |
          cp receipts_project/helm_chart/values-secret.template.yaml values-secret.yaml

          sed -i "s|__DB_USER__|${{ secrets.DB_USER }}|g" values-secret.yaml
          sed -i "s|__DB_PASSWORD__|${{ secrets.DB_PASSWORD }}|g" values-secret.yaml
          sed -i "s|__S3_BUCKET__|${{ secrets.S3_BUCKET_NAME }}|g" values-secret.yaml
          sed -i "s|__S3_REGION__|${{ secrets.AWS_REGION }}|g" values-secret.yaml
          sed -i "s|__DB_CONNECTION_STRING__|${{ secrets.DB_CONNECTION_STRING }}|g" values-secret.yaml
          sed -i "s|__AWS_ACCESS_KEY_ID__|${{ secrets.AWS_ACCESS_KEY_ID }}|g" values-secret.yaml
          sed -i "s|__AWS_SECRET_ACCESS_KEY__|${{ secrets.AWS_SECRET_ACCESS_KEY }}|g" values-secret.yaml

      - name: Tar and base64-encode Helm chart
        run: |
          tar -czf helm_chart.tar.gz -C receipts_project helm_chart
          base64 helm_chart.tar.gz > helm_chart.tar.gz.b64
          echo "Helm chart tar file created and encoded."
          ls /tmp/

      - name: Create JSON command file for copying the helm chart tar file into ec2 using ssm
        run: |
          COMMANDS_JSON=$(jq -n \
            '{
              commands: [
                "echo \"Copying Helm chart tar file to EC2...\"",
                "cat > /tmp/helm_chart.tar.gz.b64 <<EOF",
                "'"$(cat helm_chart.tar.gz.b64)"'",
                "EOF",
                "echo \"Decoding and extracting Helm chart...\"",
                "base64 -d /tmp/helm_chart.tar.gz.b64 > /tmp/helm_chart.tar.gz",
                "tar -xzvf /tmp/helm_chart.tar.gz -C /helm_chart/"
              ]
            }')

          echo "$COMMANDS_JSON" > copy-helm-chart.json
          cat copy-helm-chart.json

      - name: Run SSM command to copy Helm chart tar file
        id: run-ssm-copy-helm-chart
        uses: ./.github/actions/ssm
        with:
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          instance_id: ${{ steps.fetch-minikube-ec2-ip.outputs.instance_id }}
          commands-file-name: copy-helm-chart.json
          aws_region: ${{ env.AWS_REGION }}

      - name: Create JSON command file for deployment + remove old images
        run: |
          COMMANDS_JSON=$(jq -n \
            --arg image_tag "$IMAGE_TAG" \
            --arg deployment "$DEPLOYMENT_NAME" \
            --arg image_repo "$IMAGE_REPO" \
            --arg kubeconfig_path "${{ vars.KUBECONFIG_PATH }}" \
            '{
              commands: [
                "export KUBECONFIG=\($kubeconfig_path)",          
                "echo \"Deploying new Docker image...\"",
                "helm upgrade \($deployment) ./receipts_project/helm_chart/ --install --namespace default --values ./receipts_project/helm_chart/values.yaml --values ./receipts_project/helm_chart/values-secret.yaml --set image.repository=\($image_repo) --set image.tag=\($image_tag)",
                "kubectl rollout status deployment/\($deployment) -n default --timeout=60s || (echo \"Rollout failed\" && exit 1)",
                "kubectl label deployment/\($deployment) version=\($image_tag) --overwrite",
                "echo \"Cleaning up old Docker images...\"",
                "runuser -l ec2-user -c \"minikube ssh -- docker system prune -a -f\""
              ]
            }')

          echo "$COMMANDS_JSON" > deploy-commands.json
          cat deploy-commands.json

      - name: Run SSM command using action
        id: run-ssm-command
        uses: ./.github/actions/ssm
        with:
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          instance_id: ${{ steps.fetch-minikube-ec2-ip.outputs.instance_id }}
          commands-file-name: deploy-commands.json
          aws_region: ${{ env.AWS_REGION }}



      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v3
      #   with:
      #     role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
      #     aws-region: ${{ secrets.AWS_REGION }}

      # - name: Deploy via SSM to EC2
      #   env:
      #     INSTANCE_ID: ${{ steps.fetch-minikube-ec2-ip.outputs.instance_id }}
      #     IMAGE_TAG: ${{ steps.extract-image-tag.outputs.current_image_tag }}
      #   run: |
      #     aws ssm send-command \
      #       --instance-ids $INSTANCE_ID \
      #       --document-name "AWS-RunShellScript" \
      #       --comment "Update Kubernetes deployment image" \
      #       --parameters commands=["export KUBECONFIG=/home/ec2-user/.kube/config","kubectl set image deployment/receipts-api receipts-api=ozblech/receipts-api:$IMAGE_TAG"] \
      #       --cloud-watch-output-config CloudWatchOutputEnabled=true \
      #       --output text