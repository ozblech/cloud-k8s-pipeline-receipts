name: CD - Deploy with kubectl

permissions:
  id-token: write  # Required for OIDC
  contents: read   # Required for actions/checkout

on:
  workflow_run:
    workflows: ["CI - Docker Build & Push and Tag"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to EC2 Minikube
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0  # This ensures all history and tags are fetched

      - name: Get latest Git tag
        id: extract-image-tag
        uses: ./.github/actions/extract-image-tag

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
    
      - name: echo current image tag and minikube IP
        run: |
            echo "Current image tag: ${{ steps.extract-image-tag.outputs.current_image_tag }}"
            echo "Current version: ${{ steps.extract-image-tag.outputs.current_version }}"

      - name: Fetch EC2 public IP
        id: fetch-minikube-ec2-ip
        uses: ./.github/actions/fetch-ec2-public-ip
        with:
          tag_name: minikube-ec2
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Print DNS
        run: echo "DNS is ${{ steps.fetch-minikube-ec2-ip.outputs.public_dns }}"

      # - name: Deploy to Minikube via SSH
      #   env:
      #     IMAGE_TAG: ${{ steps.extract-image-tag.outputs.current_image_tag }}
      #     IMAGE_REPO: ozblech/receipts-api
      #     DEPLOYMENT_NAME: receipts-api
      #     EC2_PUBLIC_DNS: ${{ steps.fetch-minikube-ec2-ip.outputs.public_dns }}
      #   run: |
      #     ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@$EC2_PUBLIC_DNS << EOF
      #       echo "🚀 Deploying image: $IMAGE_REPO:$IMAGE_TAG"

      #       # Ensure kubectl is using Minikube
      #       export KUBECONFIG=\$HOME/.kube/config

      #       # Set new image in the deployment
      #       kubectl set image deployment/$DEPLOYMENT_NAME \
      #         receipts-api=$IMAGE_REPO:$IMAGE_TAG

      #       # Verify rollout status
      #       kubectl rollout status deployment/$DEPLOYMENT_NAME -n default
      #     EOF

      - name: Update Deployment Image via SSM
        env:
            IMAGE_TAG: ${{ steps.extract-image-tag.outputs.current_image_tag }}
            IMAGE_REPO: ozblech/receipts-api
            DEPLOYMENT_NAME: receipts-api
            INSTANCE_ID: ${{ steps.fetch-minikube-ec2-ip.outputs.instance_id }}
        run: |
          COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --instance-ids "$INSTANCE_ID" \
          --comment "Deploy new image to Minikube" \
          --parameters '{
            "commands": [
              "echo ===============================================",
              "echo 🚀 Starting deployment of new image...",
              "echo ===============================================",
              "echo 🧪 Verifying environment...",
              "whoami",
              "pwd",
              "echo $HOME",
              "ls -la $HOME/.kube",
              "export KUBECONFIG=$HOME/.kube/config",
              "echo ✅ KUBECONFIG is set to: $KUBECONFIG",
              "echo 🧠 Current kubectl context:",
              "kubectl config current-context || echo ❌ Failed to get current context",
              "echo 🔍 Checking cluster nodes:",
              "kubectl get nodes || echo ❌ Failed to get nodes",
              "echo 🔍 Existing pods before update:",
              "kubectl get pods -n default || echo ❌ Failed to get pods",
              "echo 🔄 Deploying image: ozblech/receipts-api:1.0.40-98892a0",
              "kubectl set image deployment/receipts-api receipts-api=ozblech/receipts-api:1.0.40-98892a0 || echo ❌ Failed to update image",
              "echo 🔁 Waiting for rollout to complete...",
              "kubectl rollout status deployment/receipts-api -n default || echo ❌ Rollout status check failed",
              "echo ✅ Deployment complete. Checking pods again...",
              "kubectl get pods -n default",
              "echo ===============================================",
              "echo 🎉 Deployment script finished!",
              "echo ==============================================="
            ]
          }' \
          --timeout-seconds 600 \
          --region us-west-2)
          
          # Wait a few seconds or add a loop to poll until it's done
          sleep 10

          # Fetch and print the output
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "i-00ea5ce5ca5248a02" \
            --output text \
            --query "StandardOutputContent"