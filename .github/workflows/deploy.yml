name: CD - Deploy with kubectl

permissions:
  id-token: write  # Required for OIDC
  contents: read   # Required for actions/checkout

on:
  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string

env:
  IMAGE_REPO: ${{ vars.IMAGE_REPO }}              # e.g., ozblech/receipts-api
  DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }}    # e.g., receipts-api
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IMAGE_TAG: ${{ inputs.image_tag }}              # e.g., a1b2c3d
  SECRET_NAME: "receipts-app-secrets_new"         # Name of the secret in AWS Secrets Manager

jobs:
  deploy:
    name: Deploy to EC2 Minikube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code # for using actions
        uses: actions/checkout@v4

      - name: Fetch EC2 public IP
        id: fetch-minikube-ec2-ip
        uses: ./.github/actions/fetch-ec2-public-ip
        with:
          tag_name: ${{ vars.MINIKUBE_EC2_TAG_NAME }}       # e.g., minikube-ec2
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          aws_region: ${{ env.AWS_REGION }}

      - name: Print DNS
        run: echo "DNS is ${{ steps.fetch-minikube-ec2-ip.outputs.public_dns }}"

      - name: Tar and base64-encode Helm chart
        run: |
          tar -czf helm_chart.tar.gz -C receipts_project/helm_chart .
          base64 helm_chart.tar.gz > helm_chart.tar.gz.b64
          echo "Helm chart tar file created and encoded."
          ls -l helm_chart*

      - name: Upload Helm chart tarball to S3
        run: |
          aws s3 cp helm_chart.tar.gz s3://${{ secrets.S3_BUCKET_NAME }}/helm_chart.tar.gz

      - name: Create JSON command file for copying Helm chart tar file from S3 to EC2 and extracting it
        run: |
          COMMANDS_JSON=$(jq -n \
            --arg bucket "${{ secrets.S3_BUCKET_NAME }}" \
            '{
              commands: [
                "echo \"Downloading Helm chart from S3...\"",
                "aws s3 cp s3://\($bucket)/helm_chart.tar.gz /tmp/helm_chart.tar.gz",
                "mkdir -p /helm_chart/",
                "tar -xzvf /tmp/helm_chart.tar.gz -C /helm_chart/"
              ]
            }')

          echo "$COMMANDS_JSON" > copy-helm-chart.json
          cat copy-helm-chart.json

      - name: Run SSM command to copy Helm chart tar file from s3 to EC2
        id: run-ssm-copy-helm-chart
        uses: ./.github/actions/ssm
        with:
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          instance_id: ${{ steps.fetch-minikube-ec2-ip.outputs.instance_id }}
          commands-file-name: copy-helm-chart.json
          aws_region: ${{ env.AWS_REGION }}

      - name: Create JSON command file for deployment + remove old images
        run: |
          IMAGE_TAG="${{ env.IMAGE_TAG }}"
          DEPLOYMENT_NAME="${{ env.DEPLOYMENT_NAME }}"
          IMAGE_REPO="${{ env.IMAGE_REPO }}"
          KUBECONFIG_PATH="${{ vars.KUBECONFIG_PATH }}"
          SECRET_NAME="${{ env.SECRET_NAME }}"
          
          COMMANDS_JSON=$(jq -n \
            --arg kubeconfig_path "$KUBECONFIG_PATH" \
            --arg deployment "$DEPLOYMENT_NAME" \
            --arg image_tag "$IMAGE_TAG" \
            --arg image_repo "$IMAGE_REPO" \
            --arg secret_name "$SECRET_NAME" \
            '{
              commands: [
                "export KUBECONFIG=\($kubeconfig_path)",
                "echo \"Fetching secrets from AWS Secrets Manager...\"",
                "SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id \($secret_name) --query SecretString --output text)",

                "DB_USER=$(echo \"$SECRET_JSON\" | jq -r .db_user)",
                "DB_PASSWORD=$(echo \"$SECRET_JSON\" | jq -r .db_password)",
                "S3_BUCKET=$(echo \"$SECRET_JSON\" | jq -r .s3_bucket_name)",
                "S3_REGION=$(echo \"$SECRET_JSON\" | jq -r .s3_region)",
                "DB_CONN=$(echo \"$SECRET_JSON\" | jq -r .db_connection_string)",
                "AWS_KEY_ID=$(echo \"$SECRET_JSON\" | jq -r .aws_access_key_id)",
                "AWS_SECRET=$(echo \"$SECRET_JSON\" | jq -r .aws_secret_access_key)",

                "echo \"Creating secret.yaml file\"",
                "cat <<EOF > /helm_chart/values-secret.yaml\nsecret:\n  db_user: \"$DB_USER\"\n  db_password: \"$DB_PASSWORD\"\n  s3_bucket_name: \"$S3_BUCKET\"\n  s3_region: \"$S3_REGION\"\n  db_connection_string: \"$DB_CONN\"\n\naws:\n  AWS_ACCESS_KEY_ID: \"$AWS_KEY_ID\"\n  AWS_SECRET_ACCESS_KEY: \"$AWS_SECRET\"\nEOF",
                "chmod 600 /helm_chart/values-secret.yaml",

                "echo \"Deploying new Docker image...\"",
                "helm upgrade \"\($deployment)\" /helm_chart/helm_chart --install --namespace default -f /helm_chart/values.yaml -f /helm_chart/values-secret.yaml --set image.repository=\($image_repo) --set image.tag=\($image_tag)",
                "kubectl rollout status deployment/\($deployment) -n default --timeout=60s || (echo \"Rollout failed\" && exit 1)",
                "kubectl label deployment/\($deployment) version=\($image_tag) --overwrite",
                "echo \"Removing secret values file...\"",
                "shred -u /helm_chart/values-secret.yaml",
                "echo \"Cleaning up old Docker images...\"",
                "runuser -l ec2-user -c \"minikube ssh -- docker system prune -a -f\""
              ]
            }')

          echo "$COMMANDS_JSON" > deploy-commands.json
          cat deploy-commands.json

      - name: Run SSM command using action
        id: run-ssm-command
        uses: ./.github/actions/ssm
        with:
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          instance_id: ${{ steps.fetch-minikube-ec2-ip.outputs.instance_id }}
          commands-file-name: deploy-commands.json
          aws_region: ${{ env.AWS_REGION }}

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v3
      #   with:
      #     role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
      #     aws-region: ${{ secrets.AWS_REGION }}

      # - name: Deploy via SSM to EC2
      #   env:
      #     INSTANCE_ID: ${{ steps.fetch-minikube-ec2-ip.outputs.instance_id }}
      #     IMAGE_TAG: ${{ steps.extract-image-tag.outputs.current_image_tag }}
      #   run: |
      #     aws ssm send-command \
      #       --instance-ids $INSTANCE_ID \
      #       --document-name "AWS-RunShellScript" \
      #       --comment "Update Kubernetes deployment image" \
      #       --parameters commands=["export KUBECONFIG=/home/ec2-user/.kube/config","kubectl set image deployment/receipts-api receipts-api=ozblech/receipts-api:$IMAGE_TAG"] \
      #       --cloud-watch-output-config CloudWatchOutputEnabled=true \
      #       --output text