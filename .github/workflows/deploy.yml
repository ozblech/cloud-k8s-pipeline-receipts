name: CD - Deploy with kubectl

permissions:
  id-token: write  # Required for OIDC
  contents: read

on:
  workflow_run:
    workflows: ["CI - Docker Build & Push and Tag"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to EC2 Minikube
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0  # This ensures all history and tags are fetched

      - name: Get latest Git tag
        id: extract-image-tag
        uses: ./.github/actions/extract-image-tag

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
    
      - name: echo current image tag and minikube IP
        run: |
            echo "Current image tag: ${{ steps.extract-image-tag.outputs.current_image_tag }}"
            echo "Minikube IP: ${{ secrets.EC2_HOST }}"

      - name: Debug OIDC sub claim
        uses: actions/github-script@v7
        with:
            script: |
                const id_token = await core.getIDToken();
                core.info(`OIDC token: ${id_token}`);
        
      - name: Configure AWS credentials (via OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
            role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role"
            aws-region: us-west-2

      - name: Fetch EC2 public IP
        id: ec2
        run: |
          dns=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=minikube-ec2" \
            --query "Reservations[0].Instances[0].PublicDnsName" \
            --output text)
          echo "public_dns=$dns" >> $GITHUB_OUTPUT

      - name: Print DNS
        run: echo "DNS is ${{ steps.ec2.outputs.public_dns }}"

      - name: Deploy to Minikube via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ steps.ec2.outputs.public_dns }} << 'EOF'
            echo "Updating image to tag: ${{ steps.extract-image-tag.outputs.current_image_tag }}"

            # Ensure kubectl is using Minikube
            export KUBECONFIG=$HOME/.kube/config

            # Set new image in the deployment
            kubectl set image deployment/receipts-api receipts=ozblech/receipts-api:${{ steps.extract-image-tag.outputs.current_image_tag }} -n default

            # Verify rollout status
            kubectl rollout status deployment/receipts-api -n default
          EOF